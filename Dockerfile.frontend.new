# Dockerfile for the frontend (Next.js)
# Set proxy arguments
ARG HTTP_PROXY
ARG HTTPS_PROXY

# 1. Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm first
RUN npm install -g pnpm --verbose

# Copy workspace configuration and root package files
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./

# Copy frontend package.json
COPY frontend/package.json ./frontend/

ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY

# Install all workspace dependencies
RUN pnpm install --verbose

# Copy the rest of the frontend application
COPY frontend/. ./frontend/

# Change to frontend directory for build
WORKDIR /app/frontend

# Build the Next.js application
RUN pnpm build

# 2. Production stage - optimized for minimal size
FROM node:20-alpine AS runtime

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

WORKDIR /app

# Copy the standalone output from builder (this includes all dependencies)
COPY --from=builder --chown=nextjs:nodejs /app/frontend/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/frontend/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/frontend/public ./public

# Switch to non-root user
USER nextjs

# Expose the port the app runs on
EXPOSE 3000

# Set environment variables
ENV NODE_ENV=production
ENV HOSTNAME="0.0.0.0"
ENV PORT=3000

# Start the application
CMD ["node", "server.js"]
