# Dockerfile for the frontend (Next.js)
# Set proxy arguments
ARG HTTP_PROXY
ARG HTTPS_PROXY

# 1. Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm first
RUN npm install -g pnpm --verbose

# Copy workspace configuration and root package files
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./

# Copy frontend package.json
COPY frontend/package.json ./frontend/

ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY

# Install all workspace dependencies
RUN pnpm install --verbose

# Copy the rest of the frontend application
COPY frontend/. ./frontend/

# Change to frontend directory for build
WORKDIR /app/frontend

# Build the Next.js application
RUN pnpm build

# 2. Production stage
FROM node:20-alpine

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm --verbose

# Copy workspace configuration and root package files for production install
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./
COPY frontend/package.json ./frontend/

ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY

# Install production dependencies
RUN pnpm install --prod --verbose

# Copy built assets from the builder stage
COPY --from=builder /app/frontend/.next ./frontend/.next
COPY --from=builder /app/frontend/public ./frontend/public
COPY --from=builder /app/frontend/next.config.ts ./frontend/

# Change to frontend directory
WORKDIR /app/frontend

# Expose the port the app runs on
EXPOSE 3000

# Start the application
CMD ["pnpm", "start"]