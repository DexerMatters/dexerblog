# Docker Compose configuration optimized for development
# Usage: docker-compose -f docker-compose.dev.yml up
services:
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend-dev
      args:
        - HTTP_PROXY=http://172.17.0.1:7890
        - HTTPS_PROXY=http://172.17.0.1:7890
    ports:
      - "3000:3000"
    volumes:
      # Mount the entire project root for workspace support
      - .:/app
      # Prevent node_modules from being overwritten by host
      - /app/node_modules
      - /app/frontend/node_modules
      - /app/frontend/.next
    depends_on:
      - backend-dev
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    # Add restart policy for development stability
    restart: unless-stopped

  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.backend-dev
      args:
        - HTTP_PROXY=http://172.17.0.1:7890
        - HTTPS_PROXY=http://172.17.0.1:7890
    ports:
      - "3001:3001"
    volumes:
      # Mount the backend directory for hot reloading
      - ./backend:/app
      # Prevent node_modules from being overwritten by host
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - NODE_ENV=development
    # Add restart policy for development stability
    restart: unless-stopped

  db:
    image: postgres:alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: dexer
      POSTGRES_PASSWORD: root
      POSTGRES_DB: dexerblog
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dexer -d dexerblog" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - app-network

  # Optional: Add a development proxy for easier testing
  nginx-dev:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-dev
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
